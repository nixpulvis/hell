This document describes the interface of a Player in the 6nimmit!/take5 game. The interface is written in Rust, and rustdoc documentation. For clarity we've omitted some of the needed Rust like imports from this document. All Rust code will be put in ``` blocks to distinguish it.

You may also run `cargo doc --open` and navigate to the Player trait's documentation for better formatting.

```player/mod.rs
/// A unique identifier for a player in the game.
pub type Id = u8;
```

Below is the player trait. This is the majority of the interface, although it does reference a few other data structures which are documented below as well.

```player/mod.rs
/// A player draws and plays cards in an attempt to win the game.
///
/// Implementations of `Player` must give some way to create themselves,
/// this is not spelled out in the interface of a player as this function
/// might be vary different for different types of players.
pub trait Player: fmt::Display {
    /// Returns the id of a player.
    ///
    /// # Examples
    ///
    /// ```
    /// use take5::Player;
    /// use take5::player::AiPlayer;
    ///
    /// let ai = AiPlayer::new(1);
    /// assert_eq!(ai.id(), 1);
    /// ```
    fn id(&self) -> Id;

    /// Returns the set of cards the player is holding.
    ///
    /// # Examples
    ///
    /// ```
    /// use take5::{Card, Player};
    /// use take5::player::AiPlayer;
    ///
    /// let mut deck = Card::deck(|_| 2);
    /// let mut ai = AiPlayer::new(1);
    ///
    /// // Starts without any cards in it's hand.
    /// assert!(ai.hand().is_empty());
    /// // Draws a card.
    /// ai.draw(deck.pop().unwrap());
    /// // Now the player has one card in it's hand.
    /// assert_eq!(ai.hand().len(), 1);
    /// ```
    fn hand(&self) -> &[Card];

    /// Returns the set of cards the player has taken, these will count
    /// towards their score.
    ///
    /// # Examples
    ///
    /// ```
    /// use take5::{Card, Player};
    /// use take5::player::AiPlayer;
    ///
    /// let mut deck = Card::deck(|_| 2);
    /// let mut ai = AiPlayer::new(1);
    ///
    /// // Starts without any cards in it's pile.
    /// assert!(ai.pile().is_empty());
    /// // Takes five cards.
    /// ai.take(deck.drain(0..5).collect());
    /// // Now the player has five cards in it's pile.
    /// assert_eq!(ai.pile().len(), 5);
    /// ```
    fn pile(&self) -> &[Card];

    /// Draws a card into the player's hand.
    ///
    /// # Examples
    ///
    /// ```
    /// use take5::{Card, Player};
    /// use take5::player::AiPlayer;
    ///
    /// let mut deck = Card::deck(|_| 2);
    /// let mut ai = AiPlayer::new(1);
    ///
    /// // Draw 10 cards.
    /// for _ in 0..10 {
    ///     ai.draw(deck.pop().unwrap());
    /// }
    /// assert_eq!(ai.hand().len(), 10);
    /// ```
    fn draw(&mut self, Card);

    /// Gives a player the board to look at. Should be triggered directly before
    /// the dealer asks for the Player to play a card, or pick a stack to take.
    ///
    /// # Examples
    ///
    /// ```
    /// use take5::{Card, Board, Player, StackId};
    /// use take5::player::AiPlayer;
    ///
    /// let mut deck = Card::deck(|_| 2);
    /// let mut ai = AiPlayer::new(1);
    ///
    /// // Setup the board.
    /// let mut board = Board::default();
    /// for id in StackId::all().iter() {
    ///     board[*id].push(deck.pop().unwrap());
    /// }
    ///
    /// // Look at the board.
    /// ai.look_at_board(&board);
    /// ```
    fn look_at_board(&mut self, &Board);

    /// Gives a player the played cards to look at. The played cards are
    /// given as pairs of the card, and the `Id` of the player who played
    /// the card. Should be triggered by the Dealer "flipping" the cards
    /// each round.
    ///
    /// # Examples
    ///
    /// ```
    /// use take5::{Card, Board, Player, StackId};
    /// use take5::player::AiPlayer;
    ///
    /// let mut deck = Card::deck(|_| 2);
    /// let mut ai = AiPlayer::new(1);
    ///
    /// // Setup a board.
    /// let mut played = Vec::new();
    /// for i in 1..6 {
    ///     played.push((deck.remove(0), i));
    /// }
    ///
    /// // Look at the played cards.
    /// ai.look_at_played(&played);
    /// ```
    fn look_at_played(&mut self, &[(Card, Id)]);

    /// Gives a player the taken cards to look at. The taken cards are
    /// given as a collection of cards and the `Id` of the player taking
    /// them. Should be triggered by the dealer any time a player is forces
    /// to put a stack from the board into their pile.
    ///
    /// # Examples
    ///
    /// ```
    /// use take5::{Card, Board, Player, StackId};
    /// use take5::player::AiPlayer;
    ///
    /// let mut deck = Card::deck(|_| 2);
    /// let mut ai = AiPlayer::new(1);
    ///
    /// // Setup a board.
    /// let mut taken = Vec::new();
    /// for i in 0..5 {
    ///     taken.push(deck.remove(0));
    /// }
    ///
    /// // Look at taken cards.
    /// ai.look_at_taken((&taken, 1));
    /// ```
    fn look_at_taken(&mut self, (&[Card], Id));

    /// Returns a card the player wishes to play.
    ///
    /// # Panics
    ///
    /// Player implementations are allowed to panic if there are no cards
    /// in any stack of the board. The board can be expected to have at least
    /// one card in each stack. This is the responsibility of the dealer
    /// to maintain.
    ///
    /// Player implementations may also panic if asked to play a card when
    /// they are out of cards. The dealer should never ask this of a player
    /// since the number of turns in a round is fixed to 10.
    ///
    /// # Examples
    ///
    /// ```
    /// use take5::{Card, Board, Player, StackId};
    /// use take5::player::AiPlayer;
    ///
    /// let mut deck = Card::deck(|_| 2);
    /// let mut ai = AiPlayer::new(1);
    ///
    /// // Draw a card.
    /// let card = deck.pop().unwrap();
    /// let face = card.face();
    /// ai.draw(card);
    /// // With only one card, the player must play it.
    /// assert_eq!(ai.play().face(), face);
    /// ```
    fn play(&mut self) -> Card;

    /// If a played card is lower than all cards on the board, return
    /// the `StackId` of the stack you wish to take.
    ///
    /// # Panics
    ///
    /// Player implementations are allowed to panic if there are no cards
    /// in any stack of the board. The board can be expected to have at least
    /// one card in each stack. This is the responsibility of the dealer
    /// to maintain.
    ///
    /// # Examples
    ///
    /// ```
    /// use take5::{Card, Board, Player, StackId};
    /// use take5::player::AiPlayer;
    ///
    /// let mut deck = Card::deck(|_| 2);
    /// let mut ai = AiPlayer::new(1);
    ///
    /// // Setup a board.
    /// let mut board = Board::default();
    /// for id in StackId::all().iter() {
    ///     board[*id].push(deck.pop().unwrap());
    /// }
    ///
    /// // Print the stack this player chose.
    /// println!("{}", board[ai.choose()]);
    /// ```
    fn choose(&self) -> StackId;

    /// Take a set of cards for the player to add to their pile.
    ///
    /// # Examples
    ///
    /// ```
    /// use take5::{Card, Player};
    /// use take5::player::AiPlayer;
    ///
    /// let mut deck = Card::deck(|_| 2);
    /// let mut ai = AiPlayer::new(1);
    ///
    /// // Takes five cards.
    /// let len = ai.pile().len();
    /// ai.take(deck.drain(0..5).collect());
    /// assert_eq!(ai.pile().len(), len + 5);
    /// ```
    fn take(&mut self, Vec<Card>);

    /// Returns the current score given the pile of cards this player
    /// has taken. Score is calculated by summing each of the player's
    /// card's bull value in the pile.
    ///
    /// # Examples
    ///
    /// ```
    /// use take5::{Card, Player};
    /// use take5::player::AiPlayer;
    ///
    /// let mut deck = Card::deck(|_| 2);
    /// let mut ai = AiPlayer::new(1);
    ///
    /// // Takes five cards.
    /// ai.take(deck.drain(0..5).collect());
    /// // Player took: f1b1, f2b1, f3b1, f4b1, f5b2
    /// assert_eq!(ai.score(), 6);
    /// ```
    fn score(&self) -> u8 {
        self.pile().iter().fold(0, |s, c| s + c.bull())
    }
}
```

Supporting data structures. Keep in mind that some of these interfaces are not
complete or stable, as they are not accessible from the player. For example
pushing to a stack is not something a player can do because the player will
never get a mutable reference to a stack.

```card.rs
#[derive(Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct Card(_);

impl Card {
    /// Returns all 104 cards of the take5 deck.
    ///
    /// ```
    /// use take5::Card;
    ///
    /// let deck = Card::deck(|_| 2);
    /// assert_eq!(deck.len(), 104);
    /// ```
    pub fn deck() -> Vec<Card>;

    /// Returns the face value of this card.
    ///
    /// ```
    /// use take5::Card;
    ///
    /// let deck = Card::deck(|_| 2);
    /// assert_eq!(deck[0].face(), 1);
    /// ```
    pub fn face(&self) -> u8;

    /// Returns the bull value of this card.
    ///
    /// ```
    /// use take5::Card;
    ///
    /// let deck = Card::deck(|_| 2);
    /// assert_eq!(deck[54].face(), 55);
    /// assert_eq!(deck[54].bull(), 7);
    /// ```
    pub fn bull(&self) -> u8;
}

impl Display for Card
```

```board.rs
#[derive(Copy, Clone, Debug, PartialEq, Eq)]
pub enum StackId {A, B, C, D}

impl StackId {
	/// Returns a static array of the variants of `StackId`. This is mainly
	/// useful for iterating over the possible stacks.
	///
	/// # Examples
	///
	/// ```
	/// use take5::{Card, Board, StackId};
	///
	/// let mut deck = Card::deck(|_| 2);
	///
	/// // Setup a board.
    /// let mut board = Board::default();
    /// for id in StackId::all().iter() {
    ///     board[*id].push(deck.pop().unwrap());
    /// }
	///
	/// // Print each stack in the board.
	/// for id in StackId::all().iter() {
	///     println!("{:?}", board[*id]);
	/// }
	/// ```
	pub fn all() -> [StackId; 4];
}
```

```
/// A board represents the playing field of take5, with 4 stacks of cards.
///
/// The best way to think of the board is as an array of four stacks.
/// Access to the stacks is done via indexing with `StackId`s, and stacks
/// act much other collections, containing cards.
#[derive(Debug, Default)]
pub struct Board(_);

impl Board {
	/// Returns the id of the stack which has the largest face value,
	/// smaller than the given card. If there is no such card this
	/// function returns `None`.
	///
	/// # Examples
	///
	/// ```
	/// use take5::{Card, Board, StackId};
	///
	/// let mut deck = Card::deck(|_| 2);
    ///
    /// // Setup a board,
    /// // A: [f2b1]
    /// // B: [f3b1]
    /// // C: [f4b1]
    /// // D: [f5b2]
    /// let mut board = Board::default();
    /// for id in StackId::all().iter() {
    ///     board[*id].push(deck.remove(1));
    /// }
    /// // f1b1
    /// let card0 = deck.remove(0);
    /// // f6b1
    /// let card1 = deck.remove(0);
    /// assert_eq!(board.closest_smaller(&card0), None);
    /// assert_eq!(board.closest_smaller(&card1), Some(StackId::D));
	/// ```
	pub fn closest_smaller(&self, card: &Card) -> Option<StackId>;

	/// Clears the board, removing all cards from all stacks.
	///
	/// # Examples
	///
	/// ```
	/// use take5::{Card, Board, StackId};
	///
	/// let mut deck = Card::deck(|_| 2);
    ///
    /// // Setup a board.
    /// let mut board = Board::default();
    /// for id in StackId::all().iter() {
    ///     board[*id].push(deck.remove(1));
    /// }
    /// assert!(!board[StackId::A].is_empty());
    /// board.clear();
    /// assert!(board[StackId::A].is_empty());
	/// ```
	pub fn clear(&mut self);
}

impl ops::Index<StackId> for Board
    type Output = Stack
impl ops::IndexMut<StackId> for Board
impl fmt::Display for Board
```

```
/// A stack of cards you can put cards on and take all of.
///
/// Don't think of this as a general purpose computer science stack, it's
/// a more specific construct. This stack can only have 5 cards in it,
/// and often gives up all 5 cards and replaces them with a new empty stack.
#[derive(Debug, Default)]
pub struct Stack(_);

impl Stack {
    /// Returns true when this stack has 5 elements in it.
    ///
    /// # Examples
    ///
    /// ```
    /// use take5::{Card, Stack};
    ///
    /// let mut deck = Card::deck(|_| 2);
    /// let mut stack = Stack::default();
    /// assert!(!stack.full());
    /// for _ in 0..5 {
    ///     stack.push(deck.pop().unwrap());
    /// }
    /// assert!(stack.full());
    /// ```
    pub fn full(&self) -> bool;

    /// Add a card to the stack. This function's interface is **unstable**.
    ///
    /// TODO: Need to decide what to do if you push a card onto the stack,
    /// but the stack is full.
    pub fn push(&mut self, card: Card);

    /// Returns the stack as a vector of cards, and creates a new empty
    /// vector for the stack.
    ///
    /// # Examples
    ///
    /// ```
    /// use take5::{Card, Stack};
    ///
    /// let mut deck = Card::deck(|_| 2);
    /// let mut stack = Stack::default();
    /// for _ in 0..5 {
    ///     stack.push(deck.pop().unwrap());
    /// }
    /// let cards = stack.give();
    /// assert_eq!(cards.len(), 5);
    /// assert_eq!(stack.len(), 0);
    /// ```
    pub fn give(&mut self) -> Vec<Card>;
}

impl ops::Deref for Stack
	type Target = Vec<Card>
impl ops::DerefMut for Stack
impl fmt::Display for Stack
```
