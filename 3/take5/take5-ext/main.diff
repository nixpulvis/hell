diff --git a/2/take5/Cargo.toml b/2/take5/Cargo.toml
index 532b2df..87628bc 100644
--- a/2/take5/Cargo.toml
+++ b/2/take5/Cargo.toml
@@ -3,12 +3,6 @@ name = "take5"
 version = "0.1.0"
 authors = ["Nathan Lilienthal"]
 
-[[bin]]
-name = "take5"
-doc = false
-
 [dependencies]
 itertools = "*"
 rand = "*"
-rustc-serialize = "*"
-docopt = "*"
diff --git a/2/take5/src/dealer/custom_dealer.rs b/2/take5/src/dealer/custom_dealer.rs
deleted file mode 100644
index 0127bb5..0000000
--- a/2/take5/src/dealer/custom_dealer.rs
+++ /dev/null
@@ -1,60 +0,0 @@
-use std::path::Path;
-use rand::{self, Rng};
-use card::Card;
-use player::Player;
-use dealer::Dealer;
-use std::fs::File;
-use std::io::Read;
-
-/// A dealer who reads bull values from a configuration file.
-#[derive(Debug, Default)]
-pub struct CustomDealer {
-    deck: Vec<Card>,
-    bull_vals: Vec<u8>,
-}
-
-impl CustomDealer {
-    /// Creates a new CustomDealer using the config file with the given filename
-    ///
-    /// # Examples
-    /// ```
-    /// use take5::dealer::Dealer;
-    /// use take5::dealer::CustomDealer;
-    ///
-    /// let dealer = CustomDealer::new("bull.conf");
-    /// ```
-    pub fn new<R>(filename: R) -> CustomDealer where R: AsRef<Path> {
-        let mut file = File::open(filename).expect("File opening failed");
-        let mut file_contents = String::new();
-        let mut bull_values = Vec::new();
-
-        file.read_to_string(&mut file_contents).expect("File reading failed");
-        for s in file_contents.trim().split(',') {
-            bull_values.push(s.trim().parse().expect("Invalid bull value found in conf file"));
-        }
-
-        CustomDealer {
-            deck: Vec::new(),
-            bull_vals: bull_values,
-        }
-    }
-}
-
-impl Dealer for CustomDealer {
-    fn open(&mut self) {
-        self.deck = Card::deck(|i| self.bull_vals[(i - 1) as usize]);
-        rand::thread_rng().shuffle(&mut self.deck)
-    }
-
-    fn deal(&mut self) -> Card {
-        self.deck.pop().expect("dealer ran out of cards.")
-    }
-
-    fn deals(&mut self, players: &mut [Box<Player>]) {
-        for _ in 0..10 {
-            for player in players.iter_mut() {
-                player.draw(self.deal());
-            }
-        }
-    }
-}
diff --git a/2/take5/src/dealer/mod.rs b/2/take5/src/dealer/mod.rs
index c4a7ac5..2a5dba2 100644
--- a/2/take5/src/dealer/mod.rs
+++ b/2/take5/src/dealer/mod.rs
@@ -3,7 +3,6 @@ use board::Board;
 use player::{Player, Id};
 
 pub use self::standard_dealer::StandardDealer;
-pub use self::custom_dealer::CustomDealer;
 
 pub trait Dealer {
     /// Open a new deck of cards and shuffle it.
@@ -171,4 +170,3 @@ pub trait Dealer {
 }
 
 mod standard_dealer;
-mod custom_dealer;
diff --git a/2/take5/src/game.rs b/2/take5/src/game.rs
index 6d27c54..1c111fa 100644
--- a/2/take5/src/game.rs
+++ b/2/take5/src/game.rs
@@ -1,51 +1,7 @@
-use docopt::Docopt;
 use itertools::Itertools;
 use board::Board;
-use dealer::{Dealer, StandardDealer, CustomDealer};
-use player::{Player, AiPlayer};
-
-#[cfg_attr(rustfmt, rustfmt_skip)]
-const USAGE: &'static str = "
-The card game take5 (or 6nimmit!).
-
-Usage:
-    take5 <players>
-    take5 [--conf=<file>] <players>
-    take5 [-hv]
-
-Options:
-    -h, --help     Show this screen.
-    -v, --version  Show the version of take5.
-    --conf=<file>  Designates file as the configuration for bull values.
-                   This file should only contain 104 comma separated bull values.
-";
-
-#[derive(RustcDecodable)]
-struct Args {
-    arg_players: u8,
-    flag_conf: Option<String>,
-}
-
-impl Args {
-    fn parse() -> Self {
-        let version = format!("{}.{}.{}{}",
-                              env!("CARGO_PKG_VERSION_MAJOR"),
-                              env!("CARGO_PKG_VERSION_MINOR"),
-                              env!("CARGO_PKG_VERSION_PATCH"),
-                              option_env!("CARGO_PKG_VERSION_PRE").unwrap_or(""));
-        let args: Args = Docopt::new(USAGE)
-                             .and_then(|d| d.version(Some(version)).decode())
-                             .unwrap_or_else(|e| e.exit());
-        args.validate();
-        args
-    }
-
-    fn validate(&self) {
-        if self.arg_players < 2 || self.arg_players > 10 {
-            panic!("Invalid number of players.");
-        }
-    }
-}
+use dealer::Dealer;
+use player::Player;
 
 /// Running of the game of take5.
 pub struct Game {
@@ -56,15 +12,8 @@ pub struct Game {
 
 impl Game {
     /// Creates a new game, parsing arguments from the command line.
-    pub fn new() -> Self {
-        let args = Args::parse();
+    pub fn new(dealer: Box<Dealer>, players: Vec<Box<Player>>) -> Self {
         let board = Board::default();
-        let dealer = match args.flag_conf {
-            None => Box::new(StandardDealer::default()) as Box<Dealer>,
-            Some(s) => Box::new(CustomDealer::new(&s)) as Box<Dealer>,
-        };
-        let players = (0..args.arg_players).map(|id| Box::new(AiPlayer::new(id)) as Box<Player>).collect();
-
         Game {
             board: board,
             dealer: dealer,
diff --git a/2/take5/src/lib.rs b/2/take5/src/lib.rs
index bc24557..9009a4a 100644
--- a/2/take5/src/lib.rs
+++ b/2/take5/src/lib.rs
@@ -41,8 +41,6 @@
 //! ```
 extern crate rand;
 extern crate itertools;
-extern crate rustc_serialize;
-extern crate docopt;
 
 pub use state::Game;
 pub use card::Card;
diff --git a/2/take5/src/main.rs b/2/take5/src/main.rs
deleted file mode 100644
index 92d1747..0000000
--- a/2/take5/src/main.rs
+++ /dev/null
@@ -1,9 +0,0 @@
-extern crate take5;
-
-use take5::Game;
-
-fn main() {
-    let mut game = state::new();
-    game.run();
-    game.report();
-}
diff --git a/2/take5_cli/Cargo.lock b/2/take5_cli/Cargo.lock
new file mode 100644
index 0000000..0ffa0cc
--- /dev/null
+++ b/2/take5_cli/Cargo.lock
@@ -0,0 +1,116 @@
+[root]
+name = "take5_cli"
+version = "0.1.0"
+dependencies = [
+ "docopt 0.6.78 (registry+https://github.com/rust-lang/crates.io-index)",
+ "rustc-serialize 0.3.16 (registry+https://github.com/rust-lang/crates.io-index)",
+ "take5 0.1.0",
+ "take5_ext 0.1.0",
+]
+
+[[package]]
+name = "advapi32-sys"
+version = "0.1.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+dependencies = [
+ "winapi 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)",
+ "winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)",
+]
+
+[[package]]
+name = "aho-corasick"
+version = "0.4.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+dependencies = [
+ "memchr 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)",
+]
+
+[[package]]
+name = "docopt"
+version = "0.6.78"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+dependencies = [
+ "regex 0.1.48 (registry+https://github.com/rust-lang/crates.io-index)",
+ "rustc-serialize 0.3.16 (registry+https://github.com/rust-lang/crates.io-index)",
+ "strsim 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)",
+]
+
+[[package]]
+name = "itertools"
+version = "0.4.7"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+
+[[package]]
+name = "libc"
+version = "0.2.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+
+[[package]]
+name = "memchr"
+version = "0.1.7"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+dependencies = [
+ "libc 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)",
+]
+
+[[package]]
+name = "rand"
+version = "0.3.13"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+dependencies = [
+ "advapi32-sys 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)",
+ "libc 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)",
+ "winapi 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)",
+]
+
+[[package]]
+name = "regex"
+version = "0.1.48"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+dependencies = [
+ "aho-corasick 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)",
+ "memchr 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)",
+ "regex-syntax 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)",
+]
+
+[[package]]
+name = "regex-syntax"
+version = "0.2.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+
+[[package]]
+name = "rustc-serialize"
+version = "0.3.16"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+
+[[package]]
+name = "strsim"
+version = "0.3.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+
+[[package]]
+name = "take5"
+version = "0.1.0"
+dependencies = [
+ "itertools 0.4.7 (registry+https://github.com/rust-lang/crates.io-index)",
+ "rand 0.3.13 (registry+https://github.com/rust-lang/crates.io-index)",
+]
+
+[[package]]
+name = "take5_ext"
+version = "0.1.0"
+dependencies = [
+ "rand 0.3.13 (registry+https://github.com/rust-lang/crates.io-index)",
+ "take5 0.1.0",
+]
+
+[[package]]
+name = "winapi"
+version = "0.2.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+
+[[package]]
+name = "winapi-build"
+version = "0.1.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+
diff --git a/2/take5_cli/Cargo.toml b/2/take5_cli/Cargo.toml
new file mode 100644
index 0000000..5cb8b8d
--- /dev/null
+++ b/2/take5_cli/Cargo.toml
@@ -0,0 +1,14 @@
+[package]
+name = "take5_cli"
+version = "0.1.0"
+authors = ["Nathan Lilienthal <nathan@nixpulvis.com>"]
+
+[dependencies]
+rustc-serialize = "*"
+docopt = "*"
+
+[dependencies.take5]
+path = "../take5"
+
+[dependencies.take5_ext]
+path = "../../3/take5_ext"
diff --git a/2/take5_cli/src/main.rs b/2/take5_cli/src/main.rs
new file mode 100644
index 0000000..e359025
--- /dev/null
+++ b/2/take5_cli/src/main.rs
@@ -0,0 +1,77 @@
+extern crate rustc_serialize;
+extern crate docopt;
+extern crate take5;
+extern crate take5_ext;
+
+use docopt::Docopt;
+use take5::Game;
+use take5::player::{Player, AiPlayer};
+use take5::dealer::{Dealer, StandardDealer};
+use take5_ext::{CustomDealer, StdinPlayer};
+
+fn main() {
+    let args = Args::parse();
+    let dealer = match args.flag_conf {
+        None => Box::new(StandardDealer::default()) as Box<Dealer>,
+        Some(ref s) => Box::new(CustomDealer::new(s)) as Box<Dealer>,
+    };
+    let players = (0..args.arg_players)
+        .map(|id| {
+            if args.flag_human {
+                Box::new(StdinPlayer::new(id)) as Box<Player>
+            } else {
+                Box::new(AiPlayer::new(id)) as Box<Player>
+            }
+        })
+        .collect();
+
+
+    let mut game = state::new(dealer, players);
+    game.run();
+    game.report();
+}
+
+#[cfg_attr(rustfmt, rustfmt_skip)]
+const USAGE: &'static str = "
+The card game take5 (or 6nimmit!).
+
+Usage:
+    take5 <players>
+    take5 [--conf=<file>, --human] <players>
+    take5 [-hv]
+
+Options:
+    -h, --help     Show this screen.
+    -v, --version  Show the version of take5.
+    --conf=<file>  Designates file as the configuration for bull values.
+                   This file should only contain 104 comma separated bull values.
+    -H, --human    Use human players instead of AI players.
+";
+
+#[derive(RustcDecodable)]
+struct Args {
+    arg_players: u8,
+    flag_conf: Option<String>,
+    flag_human: bool,
+}
+
+impl Args {
+    fn parse() -> Self {
+        let version = format!("{}.{}.{}{}",
+                              env!("CARGO_PKG_VERSION_MAJOR"),
+                              env!("CARGO_PKG_VERSION_MINOR"),
+                              env!("CARGO_PKG_VERSION_PATCH"),
+                              option_env!("CARGO_PKG_VERSION_PRE").unwrap_or(""));
+        let args: Args = Docopt::new(USAGE)
+                             .and_then(|d| d.version(Some(version)).decode())
+                             .unwrap_or_else(|e| e.exit());
+        args.validate();
+        args
+    }
+
+    fn validate(&self) {
+        if self.arg_players < 2 || self.arg_players > 10 {
+            panic!("Invalid number of players.");
+        }
+    }
+}
diff --git a/3/take5_ext/Cargo.lock b/3/take5_ext/Cargo.lock
new file mode 100644
index 0000000..e8e6f20
--- /dev/null
+++ b/3/take5_ext/Cargo.lock
@@ -0,0 +1,41 @@
+[root]
+name = "take5_ext"
+version = "0.1.0"
+dependencies = [
+ "rand 0.3.13 (registry+https://github.com/rust-lang/crates.io-index)",
+]
+
+[[package]]
+name = "advapi32-sys"
+version = "0.1.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+dependencies = [
+ "winapi 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)",
+ "winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)",
+]
+
+[[package]]
+name = "libc"
+version = "0.2.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+
+[[package]]
+name = "rand"
+version = "0.3.13"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+dependencies = [
+ "advapi32-sys 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)",
+ "libc 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)",
+ "winapi 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)",
+]
+
+[[package]]
+name = "winapi"
+version = "0.2.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+
+[[package]]
+name = "winapi-build"
+version = "0.1.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+
diff --git a/3/take5_ext/Cargo.toml b/3/take5_ext/Cargo.toml
new file mode 100644
index 0000000..75093fe
--- /dev/null
+++ b/3/take5_ext/Cargo.toml
@@ -0,0 +1,10 @@
+[package]
+name = "take5_ext"
+version = "0.1.0"
+authors = ["Nathan Lilienthal <nathan@nixpulvis.com>"]
+
+[dependencies]
+rand = "*"
+
+[dependencies.take5]
+path = "../../2/take5"
diff --git a/3/take5_ext/src/custom_dealer.rs b/3/take5_ext/src/custom_dealer.rs
new file mode 100644
index 0000000..b38002b
--- /dev/null
+++ b/3/take5_ext/src/custom_dealer.rs
@@ -0,0 +1,58 @@
+use std::fs::File;
+use std::io::{Read, BufRead};
+use std::path::Path;
+use rand::{self, Rng};
+use take5::{Card, Player, Dealer};
+
+/// A dealer who reads bull values from a configuration file.
+#[derive(Debug, Default)]
+pub struct CustomDealer {
+    deck: Vec<Card>,
+    bull_vals: Vec<u8>,
+}
+
+impl CustomDealer {
+    /// Creates a new CustomDealer using the config file with the given filename
+    ///
+    /// # Examples
+    /// ```
+    /// use take5::dealer::Dealer;
+    /// use take5::dealer::CustomDealer;
+    ///
+    /// let dealer = CustomDealer::new("bull.conf");
+    /// ```
+    pub fn new<R>(filename: R) -> CustomDealer where R: AsRef<Path> {
+        let mut file = File::open(filename).expect("File opening failed");
+        let mut file_contents = String::new();
+        let mut bull_values = Vec::new();
+
+        file.read_to_string(&mut file_contents).expect("File reading failed");
+        for s in file_contents.trim().split(',') {
+            bull_values.push(s.trim().parse().expect("Invalid bull value found in conf file"));
+        }
+
+        CustomDealer {
+            deck: Vec::new(),
+            bull_vals: bull_values,
+        }
+    }
+}
+
+impl Dealer for CustomDealer {
+    fn open(&mut self) {
+        self.deck = Card::deck(|i| self.bull_vals[(i - 1) as usize]);
+        rand::thread_rng().shuffle(&mut self.deck)
+    }
+
+    fn deal(&mut self) -> Card {
+        self.deck.pop().expect("dealer ran out of cards.")
+    }
+
+    fn deals(&mut self, players: &mut [Box<Player>]) {
+        for _ in 0..10 {
+            for player in players.iter_mut() {
+                player.draw(self.deal());
+            }
+        }
+    }
+}
diff --git a/3/take5_ext/src/lib.rs b/3/take5_ext/src/lib.rs
new file mode 100644
index 0000000..2216787
--- /dev/null
+++ b/3/take5_ext/src/lib.rs
@@ -0,0 +1,8 @@
+extern crate rand;
+extern crate take5;
+
+pub use self::custom_dealer::CustomDealer;
+pub use self::stdin_player::StdinPlayer;
+
+mod custom_dealer;
+mod stdin_player;
diff --git a/3/take5_ext/src/stdin_player.rs b/3/take5_ext/src/stdin_player.rs
new file mode 100644
index 0000000..4efb51f
--- /dev/null
+++ b/3/take5_ext/src/stdin_player.rs
@@ -0,0 +1,127 @@
+use std::fmt;
+use std::io::{self, BufRead, Write};
+use rand::Rng;
+use take5::{Board, StackId, Card, Player};
+use take5::player::Id;
+
+/// A player who makes decisions from STDIN.
+///
+/// Creating an `StdinPlayer` is done with `StdinPlayer::new()`.
+#[derive(Debug)]
+pub struct StdinPlayer {
+    id: Id,
+    hand: Vec<Card>,
+    pile: Vec<Card>,
+}
+
+impl StdinPlayer {
+    /// Creates a new AI player with the given ID.
+    ///
+    /// # Examples
+    ///
+    /// ```
+    /// use take5::player::StdinPlayer;
+    ///
+    /// let _ = StdinPlayer::new(1);
+    /// ```
+    pub fn new(id: Id) -> Self {
+        StdinPlayer {
+            id: id,
+            hand: Vec::new(),
+            pile: Vec::new(),
+        }
+    }
+}
+
+impl Player for StdinPlayer {
+    fn id(&self) -> Id {
+        self.id
+    }
+
+    fn hand(&self) -> &[Card] {
+        &self.hand
+    }
+
+    fn pile(&self) -> &[Card] {
+        &self.pile
+    }
+
+    fn draw(&mut self, card: Card) {
+        self.hand.push(card)
+    }
+
+    fn look_at_board(&mut self, board: &Board) {
+        println!("Player: {} looks at board:\n{}", self, board);
+    }
+
+    fn look_at_played(&mut self, played: &[(Card, Id)]) {
+        println!("Player: {} looks at played: {:?}", self, played);
+    }
+
+    fn look_at_taken(&mut self, taken: (&[Card], Id)) {
+        println!("TAKEN: {:?}", taken);
+    }
+
+    fn play(&mut self) -> Card {
+        print!("Your hand is: ");
+        for card in self.hand() {
+            print!("{}, ", card);
+        }
+        print!("\nPlay a card: ");
+        io::stdout().flush().expect("error writing to stdout.");
+        let stdin = io::stdin();
+        let line = stdin.lock()
+                        .lines()
+                        .next()
+                        .expect("no more lines in stdin")
+                        .expect("error reading from stdin.");
+        match line.parse() {
+            Ok(c) if c < self.hand.len() => self.hand.remove(c),
+            Ok(c) => {
+                println!("choice must be in range [0, {}], given {}.",
+                         self.hand.len() - 1,
+                         c);
+                self.play()
+            }
+            Err(e) => {
+                println!("{}, try again.", e);
+                self.play()
+            }
+        }
+    }
+
+    fn choose(&self) -> StackId {
+        print!("Your hand is: ");
+        for card in self.hand() {
+            print!("{}, ", card);
+        }
+        print!("\nChoose a stack (A, B, C, or D): ");
+        io::stdout().flush().expect("error writing to stdout.");
+        let stdin = io::stdin();
+        let line = stdin.lock()
+                        .lines()
+                        .next()
+                        .expect("no more lines in stdin")
+                        .expect("error reading from stdin.");
+        match &line[..] {
+            "A" => StackId::A,
+            "B" => StackId::B,
+            "C" => StackId::C,
+            "D" => StackId::D,
+            n @ _ => {
+                println!("choice must be one of A, B, C, or D, given {}.", n);
+                self.choose()
+            }
+        }
+    }
+
+    fn take(&mut self, cards: Vec<Card>) {
+        self.pile.extend(cards);
+    }
+}
+
+impl fmt::Display for StdinPlayer {
+    fn fmt(&self, f: &mut fmt::Formatter) -> Result<(), fmt::Error> {
+        write!(f, "STDIN Player {}", self.id())
+    }
+}
